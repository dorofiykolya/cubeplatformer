<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <member name="FlowControl">
      <summary>
        <para>Control the flow of code.</para>
      </summary>
    </member>
    <member name="If">
      <summary>
        <para>Identifies which statement to run based on the value of a boolean expression.</para>
      </summary>
    </member>
    <member name="While">
      <summary>
        <para>Executes a statement until the value of a boolean expression evaluates to false.</para>
      </summary>
    </member>
	<member name="For">
      <summary>
        <para>Run a statement or a block of statements repeatedly until a specified expression evaluates to false.</para>
      </summary>
    </member>
	<member name="Math">
      <summary>
        <para>Mathematical operation node.</para>
      </summary>
    </member>
	<member name="NOT">
      <summary>
        <para>Logical inverter.</para>
      </summary>
    </member>
	<member name="AND">
      <summary>
        <para>The conditional-AND operator performs a logical-AND of its bool operands.</para>
      </summary>
    </member>
	<member name="OR">
      <summary>
        <para>The conditional-OR operator performs a logical-OR of its bool operands. If the first operand evaluates to true, the second operand isn't evaluated. If the first operand evaluates to false, the second operator determines whether the OR expression as a whole evaluates to true or false.</para>
      </summary>
    </member>
    <member name="AsT">
      <summary>
        <para>Perform certain types of conversions between compatible reference types or nullable types.</para>
      </summary>
    </member>
    <member name="Is">
      <summary>
        <para>Checks if an object is compatible with a given type.</para>
      </summary>
    </member>
    <member name="Unary">
      <summary>
        <para>Unary operation for value.</para>
      </summary>
    </member>
    <member name="Var">
      <summary>
        <para>An implicitly typed local variable is strongly typed just as if you had declared the type yourself, but the compiler determines the type.</para>
      </summary>
    </member>
    <member name="ConditionalExpr">
      <summary>
        <para>Returns one of two values depending on the value of a Boolean expression.</para>
      </summary>
    </member>
    <member name="MakeDelegate">
      <summary>
        <para>Create a delegate with code.</para>
      </summary>
    </member>
	<member name="TryCatchFinally">
      <summary>
        <para>Consists of a try block followed by one or more catch clauses, which specify handlers for different exceptions.</para>
      </summary>
    </member>
    <member name="IncDecrement">
      <summary>
        <para>Using for incrementing/decrementing value.</para>
      </summary>
    </member>
    <member name="Switch">
      <summary>
        <para>Identifies which statement to run based on the input value.</para>
      </summary>
    </member>
    <member name="Using">
      <summary>
        <para>Provides a convenient syntax that ensures the correct use of IDisposable objects.</para>
      </summary>
    </member>
    <member name="Goto">
      <summary>
        <para>The goto statement transfers the program control directly to a labeled statement.</para>
      </summary>
    </member>
    <member name="GotoRegist">
      <summary>
        <para>Register position in code for goto node.</para>
      </summary>
    </member>
    <member name="ExecBConstr">
      <summary>
        <para>Executing constructor of base class.</para>
      </summary>
    </member>
    <member name="ExeThisBConstr">
      <summary>
        <para>Executing other constructor of this class.</para>
      </summary>
    </member>
	<member name="StringBuilder">
      <summary>
        <para>Creates string of characters.</para>
      </summary>
    </member>
	<member name="This">
      <summary>
        <para>Refers to the current instance of the class and is also used as a modifier of the first parameter of an extension method.</para>
      </summary>
    </member>
	<member name="ArrayElem">
      <summary>
        <para>Get or set array element on index.</para>
      </summary>
    </member>
	<member name="SetValue">
	  <summary>
		<para>Set value of variable. Used for ref/out pins.</para>
	  </summary>
    </member>
	<member name="DelegateReturn">
	  <summary>
		<para>Return node for delegate.</para>
	  </summary>
    </member>
	<member name="MakeArray">
      <summary>
        <para>Creates an array of elements.</para>
      </summary>
    </member>
	<member name="ForEachIndex">
      <summary>
        <para>The foreach statement repeats a group of embedded statements for each element in an array or an object collection.</para>
      </summary>
    </member>
	<member name="IsNull">
      <summary>
        <para>Returns true if selected instance is null.</para>
      </summary>
    </member>
	<member name="Null">
      <summary>
        <para>'null' value.</para>
      </summary>
    </member>
	<member name="SetDelegate">
      <summary>
        <para>Set delegate code.</para>
      </summary>
    </member>
	<member name="YieldReturnInstruction">
      <summary>
        <para>Yield for enumerator.</para>
      </summary>
    </member>
	<member name="YieldReturnValue">
      <summary>
        <para>Yield for enumerator with result value.</para>
      </summary>
    </member>
	<member name="Break">
      <summary>
        <para>Terminates the closest enclosing loop or switch statement in which it appears.</para>
      </summary>
    </member>
	<member name="Continue">
      <summary>
        <para>Passes control to the next iteration of the enclosing while, do, for, or foreach statement in which it appears.</para>
      </summary>
    </member>
	<member name="DelegLambda">
      <summary>
        <para>Delegate that represents the method that defines a set of criteria and determines whether the specified object meets those criteria vs lambda expression.</para>
      </summary>
    </member>
	<member name="ConsolePrint">
      <summary>
        <para>Print message to unity console.</para>
      </summary>
    </member>
    <member name="Lock">
      <summary>
        <para>Marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object, executing a statement, and then releasing the lock.</para>
      </summary>
    </member>
    <member name="Typeof">
      <summary>
        <para>Used to obtain the System.Type object for a type.</para>
      </summary>
    </member>
    <member name="BreakVector">
      <summary>
        <para>Brakes vector into float components (x, y, z, w).</para>
      </summary>
    </member>
	<member name="Throw">
      <summary>
        <para>Used to signal the occurrence of an anomalous situation (exception) during the program execution.</para>
      </summary>
    </member>
  </members>
</doc>
